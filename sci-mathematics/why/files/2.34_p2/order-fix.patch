diff --git a/jc/jc_position.ml b/jc/jc_position.ml
index 9ea7855..ff89c55 100644
--- a/jc/jc_position.ml
+++ b/jc/jc_position.ml
@@ -29,9 +29,9 @@
 (*                                                                        *)
 (**************************************************************************)
 
-type t = string * int * int * int
+type t = (string * int * int * int) option
 
-let dummy_position = "", 1, 0, 0
+let dummy_position = None
 
 let dummy = dummy_position
 
@@ -40,27 +40,39 @@ let is_dummy = (=) dummy
 let of_pos ({ Lexing.pos_fname = f1; pos_lnum = l1; pos_bol = b1; pos_cnum = c1 },
             { Lexing.pos_fname = f2; pos_lnum = l2; pos_bol = b2; pos_cnum = c2 } as pos) =
   if f1 = f2 && l1 >= 1 && l2 >= 1 && l2 >= l1 && c1 - b1 >= 0 && c2 - b2 >= 0 && c2 >= c1 then
-    f1, l1, c1 - b1, c2 - c1 + 1
+    Some (f1, l1, c1 - b1, c2 - c1 + 1)
   else if pos = Lexing.(dummy_pos, dummy_pos) then dummy_position
   else invalid_arg "Jc_position.of_pos"
 
 let of_loc (f, l, b, e as loc) =
-  if e >= b then f, l, b, e - b + 1
+  if e >= b then Some (f, l, b, e - b + 1)
   else if loc = Loc.dummy_floc then dummy_position
   else invalid_arg "Jc_position.of_loc"
 
-let to_loc (f, l, b, n as pos) =
-  if pos <> dummy_position then f, l, b, b + n - 1
-  else Loc.dummy_floc
+let to_loc =
+  function
+  | Some (f, l, b, n) ->
+    f, l, b, b + n - 1
+  | None -> Loc.dummy_floc
 
-let file (f, _, _, _) = f
+let file =
+  function
+  | Some (f, _, _, _) -> Some f
+  | None -> None
 
-let line (_, l, _, _) = l
+let line =
+  function
+  | Some (_, l, _, _) -> Some l
+  | None -> None
 
-let compare (f1, l1, b1, n1) (f2, l2, b2, n2) =
-  let (||=) acc r = if acc <> 0 then acc else r
-  and (=?=) = compare in
-  f1 =?= f2 ||= l1 =?= l2 ||= b1 =?= b2 ||= n1 =?= n2
+let compare pos1 pos2 =
+  match pos1, pos2 with
+  | None, _ -> 1
+  | _, None -> -1
+  | Some (f1, l1, b1, n1), Some (f2, l2, b2, n2) ->
+    let (||) acc r = if acc <> 0 then acc else r
+    and (=?=) = compare in
+    f1 =?= f2 || l1 =?= l2 || b1 =?= b2 || n1 =?= n2
 
 let equal pos1 pos2 = compare pos1 pos2 = 0
 
diff --git a/jc/jc_position.mli b/jc/jc_position.mli
index 245e85b..f37898a 100644
--- a/jc/jc_position.mli
+++ b/jc/jc_position.mli
@@ -40,8 +40,8 @@ val of_pos : Lexing.position * Lexing.position -> t
 val of_loc : string * int * int * int -> t
 
 val to_loc : t -> string  * int * int * int
-val file : t -> string
-val line : t -> int
+val file : t -> string option
+val line : t -> int option
 
 val equal : t -> t -> bool
 val compare : t -> t -> int
diff --git a/jc/jc_why3_output.ml b/jc/jc_why3_output.ml
index f8aa7c4..f7538c2 100644
--- a/jc/jc_why3_output.ml
+++ b/jc/jc_why3_output.ml
@@ -267,7 +267,11 @@ let fprintf_vc_kind fmttr k =
      | JCVCassigns -> "Assigns clause"
      | JCVCallocates -> "Allocates clause"
      | JCVCensures -> "Ensures clause"
-     | JCVCassertion pos -> Printf.sprintf "Assertion in line %d" @@ Jc_position.line pos
+     | JCVCassertion pos ->
+       begin match Jc_position.line pos with
+       | Some l -> Printf.sprintf "Assertion in line %d" l
+       | None -> Printf.sprintf "Assertion"
+       end
      | JCVCcheck "" -> "Check"
      | JCVCcheck s -> String.capitalize s ^ " check"
      | JCVCpost -> "Postcondition"
